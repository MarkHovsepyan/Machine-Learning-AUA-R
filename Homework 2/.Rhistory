## a)
x <- rnorm(100, mean= 0, sd =1)
x
## c)
y = -1+0.5*x+eps
## c)
y <- -1+0.5*x+eps
## c)
y <- -1 + 0.5 * x + e
## b)
e <- rnorm(100, mean =0, sd = 0.25)
## c)
y <- -1 + 0.5 * x + e
length(y)
y
## libraries (please install before running with install.packages())
library(ggplot2)
set.seed(1)
## a)
x <- rnorm(100, mean= 0, sd =1)
## b)
e <- rnorm(100, mean =0, sd = 0.25)
## c)
y <- -1 + 0.5 * x + e
length(y)
## d)
plot(x ~ y)
## e)
lm_fit1 <- lm(y ~ x)
summary(lm_fit1)$coefficients
## f)
plot(x,y)
abline(lm.fit.e, col="red", lwd=2)
legend(x=-2, y=.25, legend = "Linear Regression Model")
## f)
plot(x,y)
abline(lm_fit1, col="red", lwd=2)
legend(x=-2, y=.25, legend = "Linear Regression Model")
legend(x=-2, y=.25, legend = "Linear Regression Model")
legend("bottomright", c("Regression line"), lwd=1, col="red",bty ="n")
legend("bottomright", c("Linear Regression line"), lwd=1, col="red",bty ="n")
## f)
plot(x,y)
abline(lm_fit1, col="red", lwd=2)
legend("bottomright", c("Linear Regression line"), lwd=1, col="red",bty ="n")
legend("bottomright", c("Linear Regression Line"), lwd=1, col="red",bty ="n")
## f)
plot(x,y)
abline(lm_fit1, col="red", lwd=2)
legend("bottomright", c("Linear Regression Line"), lwd=1, col="red",bty ="n")
## g)
lm_fit2 <- lm(y ~ poly(x,2))
## g)
lm_fit2 <- lm(y ~ poly(x,2))
summary(lm_fit2)
anova(lm_fit1, lm_fit2)
## let's make more noise
x <- rnorm(100)
e <- rnorm(100, 0, 0.5)
y <- -1 + 0.5*x + e
## let's make more noise
x <- rnorm(100)
e <- rnorm(100, 0, 0.5)
y <- -1 + 0.5*x + e
lm_fit_morenoise <- lm(y ~ x)
summary(lm_fit_morenoise)$coefficients
summary(lm_fit_morenoise)
summary(lm_fit_morenoise)$coefficients
## let's make less noise
x <- rnorm(100)
e <- rnorm(100, 0, .05)
y = -1 + .5*x + eps
lm_fit_lessnoise <- lm(y ~ x)
## let's make less noise
x <- rnorm(100)
e <- rnorm(100, 0, .05)
y = -1 + 0.5 * x + e
lm_fit_lessnoise <- lm(y ~ x)
summary(lm_fit_lessnoise)$coefficients
## now comparison
confint(lm_fit1) # original
confint(lm_fit_lessnoise) # less noisy
confint(lm_fit_morenoise) # more noisy
library(ISLR)
data(Auto)
lm_fit_auto <- lm(mpg ~ horsepower, data=Auto)
summary(lm_fit_auto)
## iii.
predict(lm_fit_auto, data.frame("horsepower" = 98), interval="confidence")
## iii.
predict(lm_fit_auto, data.frame("horsepower" = 98), interval = "prediction")
## Predicted "mpg" for horspower of 98 is 24.46708
?predict
## b)
plot(Auto$mpg ~ Auto$horsepower, main = "MPG vs Horsepower", xlab = "Horsepower", ylab ="MPG")
abline(coef = coef(lm_fit_auto), col ="red")
abline(coef = coef(lm_fit_auto), lwd = 3, col ="red")
plot(lm_fit_auto)
par(mfrow = c(2, 2))
plot(lm_fit_auto)
## c)
par(mfrow = c(2, 2))
plot(lm_fit_auto)
data(Carseats)
## a)
lm_fit_carseats1 <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(lm_fit_carseats1)
## c)
lm_fit_carseats2 <- lm(Sales ~ Price + US, data = Carseats)
summary(lm_fit_carseats2)
summary(lm_fit_carseats1)
summary(lm_fit_carseats2)$coefficients
summary(lm_fit_carseats2)
summary(lm_fit_carseats1)
View(Carseats)
summary(lm_fit_carseats2)
## d)
anova(lm_fit_carseats1, lm_fit_carseats2)
summary(lm_fit_carseats2)
## e)
confint(lm_fit_carseats2)
## f)
par(mfrow = c(2, 2))
plot(lm_fit_carseats2)
## a)
pairs(Auto)
## b)
str(Auto)
## b)
cor(Auto[1:8]) # excluding 9 (name)
## c)
lm_fit_auto2 <- lm(mpg ~ . - name, data = Auto)
summary(lm_fit_auto2)
plot(lm_fit_auto2)
## f)
lm_fit_auto_inter = lm(mpg ~ (.-name)*(.-name), data = Auto)
summary(lm_fit_auto_inter)
summary(lm_fit_auto2)
summary(lm_fit_auto_inter)
## f)
lm_fit_auto_inter1 = lm(mpg ~.-name-cylinders-acceleration+year:origin+displacement:weight+
displacement:weight+acceleration:horsepower+acceleration:weight, data=Auto)
summary(lm_fit_auto_inter1)
lm_fit_auto_inter_all = lm(mpg ~ (.-name)*(.-name), data = Auto)
summary(lm_fit_auto_inter_all)
## libraries (please install before running with install.packages())
library(ggplot2)
library(ISLR)
set.seed(1)
## a)
x <- rnorm(100, mean = 0, sd = 1)
## b)
e <- rnorm(100, mean = 0, sd = 0.25)
## c)
y = -1 + 0.5 * x + e
length(y)
## d)
plot(x ~ y)
## e)
lm_fit1 <- lm(y ~ x)
## e)
lm_fit1 <- lm(y ~ x)
summary(lm_fit1)$coefficients
summary(lm_fit1)
## f)
plot(x, y)
## f)
plot(x, y)
## f)
plot(x ~ y)
## f)
plot(x ~ y)
## f)
plot(x,y)
~
## f)
plot(x ~ y)
## f)
plot(x ~ y)
## f)
plot(x, y)
abline(lm_fit1, col="red", lwd=2)
legend("bottomright", c("Linear Regression Line"), lwd=1, col="red",bty ="n")
## g)
lm_fit2 <- lm(y ~ poly(x,2))
summary(lm_fit2)
anova(lm_fit1, lm_fit2)
## let's make more noise
x <- rnorm(100)
e <- rnorm(100, 0, 0.5)
y = -1 + 0.5 * x + e
lm_fit_morenoise <- lm(y ~ x)
summary(lm_fit_morenoise)$coefficients
## let's make less noise
x <- rnorm(100)
e <- rnorm(100, 0, 0.125)
y = -1 + 0.5 * x + e
lm_fit_lessnoise <- lm(y ~ x)
summary(lm_fit_lessnoise)$coefficients
## now comparison
confint(lm_fit1) # original
confint(lm_fit_morenoise) # more noisy
confint(lm_fit_lessnoise) # less noisy
data(Auto)
## a)
lm_fit_auto1 <- lm(mpg ~ horsepower, data=Auto)
summary(lm_fit_auto1)
data(Auto)
## a)
lm_fit_auto1 <- lm(mpg ~ horsepower, data=Auto)
summary(lm_fit_auto1)
## i.
## The p-values for the regression coefficients are nearly zero.
## That means that there is statistical significance, and consequently, there is a relationship.
## ii.
## The R-square value indicates that about 61% of the variation
## in the response variable (mpg) is due to the predictor variable (horsepower).
## iii.
predict(lm_fit_auto1, data.frame("horsepower" = 98), interval = "prediction")
## iv.
## The 95% confidence interval:
predict(lm_fit_auto1, data.frame("horsepower" = 98), interval = "confidence")
## The 95% prediction interval:
predict(lm_fit_auto1, data.frame("horsepower" = 98), interval = "prediction")
## b)
plot(Auto$mpg ~ Auto$horsepower, main = "MPG vs Horsepower", xlab = "Horsepower", ylab ="MPG")
abline(coef = coef(lm_fit_auto1), lwd = 3, col ="red")
## c)
par(mfrow = c(2, 2))
plot(lm_fit_auto1)
data(Carseats)
## a)
lm_fit_carseats1 <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(lm_fit_carseats1)
## c)
lm_fit_carseats2 <- lm(Sales ~ Price + US, data = Carseats)
summary(lm_fit_carseats2)
## d)
anova(lm_fit_carseats1, lm_fit_carseats2)
## e)
confint(lm_fit_carseats2)
## f)
par(mfrow = c(2, 2))
plot(lm_fit_carseats2)
## f)
par(mfrow = c(2, 2))
plot(lm_fit_carseats2)
## e)
confint(lm_fit_carseats2)
summary(lm_fit_carseats2)
## a)
pairs(Auto)
## b)
cor(Auto[1:8]) # excluding 9 (name)
## c)
lm_fit_auto2 <- lm(mpg ~ . - name, data = Auto)
summary(lm_fit_auto2)
## d)
par(mfrow = c(2, 2))
plot(lm_fit_auto2)
## f)
lm_fit_auto_inter1 = lm(mpg ~.-name-cylinders-acceleration+year:origin+displacement:weight+
displacement:weight+acceleration:horsepower+acceleration:weight, data=Auto)
summary(lm_fit_auto_inter1)
lm_fit_auto_inter_all = lm(mpg ~ (.-name)*(.-name), data = Auto)
summary(lm_fit_auto_inter_all)
par(mfrow = c(2, 2))
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg)
plot(I(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower), Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$displacement), Auto$mpg)
plot(sqrt(Auto$displacement), Auto$mpg)
plot((Auto$displacement)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$displacement), Auto$mpg)
plot(sqrt(Auto$displacement), Auto$mpg)
plot((Auto$displacement)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$weight), Auto$mpg)
plot(sqrt(Auto$weight), Auto$mpg)
plot((Auto$weight)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$cylinders), Auto$mpg)
plot(sqrt(Auto$cylinders), Auto$mpg)
plot((Auto$cylinders)^2, Auto$mpg)
## let's plot some transformations and observe the results
par(mfrow = c(2, 2))
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$displacement), Auto$mpg)
plot(sqrt(Auto$displacement), Auto$mpg)
plot((Auto$displacement)^2, Auto$mpg)
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg)
## let's plot some transformations and observe the results
par(mfrow = c(2, 2))
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$displacement), Auto$mpg)
plot(sqrt(Auto$displacement), Auto$mpg)
plot((Auto$displacement)^2, Auto$mpg)
par(mfrow = c(2, 2))
plot(log(Auto$weight), Auto$mpg)
plot(sqrt(Auto$weight), Auto$mpg)
plot((Auto$weight)^2, Auto$mpg)
## let's make a model
lm_fit_auto_trnsf <- lm(mpg ~ . + sqrt(acceleration)
+ log(displacement)
+ cylinders
+ sqrt(weight)
+ log(horsepower)
+ sqrt(year)
+ origin
- name,
data = Auto)
summary(lm_fit_auto_trnsf)
